<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__group_8h_source" xml:lang="en-US">
<title>Group.h</title>
<indexterm><primary>CPP/Group.h</primary></indexterm>
<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#ifndef&#32;GROUP_H</emphasis>
2 <emphasis role="preprocessor">#define&#32;GROUP_H</emphasis>
3 
4 <emphasis role="preprocessor">#include&#32;&lt;list&gt;</emphasis>
5 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
6 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
7 <emphasis role="preprocessor">#include&#32;&quot;Multimedia.h&quot;</emphasis>
8 <emphasis role="preprocessor">#ifdef&#32;version_etape_9</emphasis>
9 <emphasis role="keyword">using&#32;</emphasis>MultimediaPtr&#32;=&#32;std::shared_ptr&lt;Multimedia&gt;;
10 
11 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_group">Group</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::list&lt;MultimediaPtr&gt;&#32;{
12 <emphasis role="preprocessor">#else</emphasis>
13 <emphasis role="keyword">class&#32;</emphasis>Group&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::list&lt;Multimedia*&gt;&#32;{
14 <emphasis role="preprocessor">#endif</emphasis>
15 <emphasis role="keyword">private</emphasis>:
16 &#32;&#32;&#32;&#32;std::string&#32;name;
17 
18 <emphasis role="keyword">public</emphasis>:
19 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Constructor</emphasis>
20 &#32;&#32;&#32;&#32;Group(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;name);
21 
22 &#32;&#32;&#32;&#32;<emphasis role="comment">//desctructor</emphasis>
23 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~Group();
24 
25 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Accessor&#32;to&#32;get&#32;the&#32;name&#32;of&#32;the&#32;group</emphasis>
26 &#32;&#32;&#32;&#32;std::string&#32;getName()&#32;<emphasis role="keyword">const</emphasis>;
27 
28 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Method&#32;to&#32;display&#32;the&#32;attributes&#32;of&#32;all&#32;objects&#32;in&#32;the&#32;list</emphasis>
29 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;display(std::ostream&amp;&#32;os)&#32;<emphasis role="keyword">const</emphasis>;
30 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Method&#32;to&#32;play&#32;the&#32;content&#32;of&#32;all&#32;objects&#32;in&#32;the&#32;list</emphasis>
31 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;play()&#32;<emphasis role="keyword">const</emphasis>;
32 };
33 
34 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
