<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__video_8h_source" xml:lang="en-US">
<title>Video.h</title>
<indexterm><primary>CPP/Video.h</primary></indexterm>
<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#ifndef&#32;VIDEO_H</emphasis>
2 <emphasis role="preprocessor">#define&#32;VIDEO_H</emphasis>
3 
4 <emphasis role="preprocessor">#include&#32;&quot;Multimedia.h&quot;</emphasis>
5 
6 <emphasis role="keyword">class&#32;</emphasis>Video&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;Multimedia&#32;{
7 <emphasis role="keyword">private</emphasis>:
8 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;duration;&#32;&#32;<emphasis role="comment">//&#32;Durée&#32;en&#32;secondes</emphasis>
9 
10 <emphasis role="keyword">public</emphasis>:
11 &#32;&#32;&#32;&#32;Video()&#32;:&#32;Multimedia(),&#32;duration(0)&#32;{}&#32;<emphasis role="comment">//&#32;Constructeur&#32;par&#32;défaut</emphasis>
12 &#32;&#32;&#32;&#32;Video(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;name,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;pathname,&#32;<emphasis role="keywordtype">int</emphasis>&#32;duration);&#32;<emphasis role="comment">//&#32;Constructeur</emphasis>
13 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~Video();&#32;<emphasis role="comment">//&#32;Destructeur</emphasis>
14 
15 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;getDuration()&#32;<emphasis role="keyword">const</emphasis>;<emphasis role="comment">//&#32;Accesseur</emphasis>
16 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setDuration(<emphasis role="keywordtype">int</emphasis>&#32;duration);<emphasis role="comment">//&#32;Modificateur&#32;</emphasis>
17 
18 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;display(std::ostream&amp;&#32;os)&#32;<emphasis role="keyword">const&#32;override</emphasis>;&#32;<emphasis role="comment">//&#32;Méthode&#32;d&apos;affichage</emphasis>
19 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;play()&#32;<emphasis role="keyword">const&#32;override</emphasis>;&#32;<emphasis role="comment">//&#32;Méthode&#32;de&#32;lecture</emphasis>
20 
21 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Serialization</emphasis>
22 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write(std::ofstream&amp;&#32;ofs)&#32;<emphasis role="keyword">const&#32;override</emphasis>;
23 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;read(std::ifstream&amp;&#32;ifs)&#32;<emphasis role="keyword">override</emphasis>;
24 
25 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Factory&#32;method</emphasis>
26 &#32;&#32;&#32;&#32;std::string&#32;getClassName()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Video&quot;</emphasis>;&#32;}
27 };
28 
29 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
