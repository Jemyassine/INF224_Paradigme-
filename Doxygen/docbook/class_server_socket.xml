<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_server_socket" xml:lang="en-US">
<title>ServerSocket Class Reference</title>
<indexterm><primary>ServerSocket</primary></indexterm>
<para>
<computeroutput>#include &lt;ccsocket.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_server_socket_1a2b3098589541243241ca25495155186c"/><emphasis role="strong">ServerSocket</emphasis> ()</para>

<para>Creates a listening socket that waits for connection requests by TCP/IP clients. </para>
</listitem>
            <listitem><para><link linkend="_class_socket">Socket</link> * <link linkend="_class_server_socket_1accc3d56d42aa50a5f3c920cf0b26959b">accept</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_server_socket_1ad5281fe6c005bca007a9a758bd612481">bind</link> (int port, int backlog=50)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_server_socket_1a3eac6d5571bb092622d328dbda2de2cf"/>int <emphasis role="strong">close</emphasis> ()</para>

<para>Closes the socket. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_server_socket_1aa1c00353c8f50697c8a4a8882e520286"/>bool <emphasis role="strong">isClosed</emphasis> () const</para>

<para>Returns true if the socket was closed. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_server_socket_1a42fb2ded476612b5f23c46abb74db9c2"/>SOCKET <emphasis role="strong">descriptor</emphasis> ()</para>

<para>Returns the descriptor of the socket. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_server_socket_1ab34154bc6114c638ae02f5e018121099"/>int <emphasis role="strong">setReceiveBufferSize</emphasis> (int size)</para>

<para>Sets the SO_RCVBUF option to the specified value. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_server_socket_1ae60d7cc31ad535e5d3cac42e38b8ec98"/>int <emphasis role="strong">setReuseAddress</emphasis> (bool)</para>

<para>Enables/disables the SO_REUSEADDR socket option. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_server_socket_1aedb9144c9c375fcb14ac47bcb9d2eb17"/>int <emphasis role="strong">setSoTimeout</emphasis> (int timeout)</para>

<para>Enables/disables SO_TIMEOUT with the specified timeout (in milliseconds). </para>
</listitem>
            <listitem><para><anchor xml:id="_class_server_socket_1a9e5e1ee852ba26156c757a0086b780fe"/>int <emphasis role="strong">setTcpNoDelay</emphasis> (bool)</para>

<para>Turns on/off TCP coalescence (useful in some cases to avoid delays). </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>TCP/IP IPv4 server socket. Waits for requests to come in over the network. TCP/IP sockets do not preserve record boundaries but <link linkend="_class_socket_buffer">SocketBuffer</link> solves this problem. </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_server_socket_1accc3d56d42aa50a5f3c920cf0b26959b"/><section>
    <title>accept()</title>
<indexterm><primary>accept</primary><secondary>ServerSocket</secondary></indexterm>
<indexterm><primary>ServerSocket</primary><secondary>accept</secondary></indexterm>
<para><computeroutput><link linkend="_class_socket">Socket</link> * ServerSocket::accept ( )</computeroutput></para>
<para>Accepts a new connection request and returns a socket for exchanging data with this client. This function blocks until there is a connection request. <formalpara><title>Returns</title>

<para>the new <link linkend="_class_socket">Socket</link> or nullptr on error. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_server_socket_1ad5281fe6c005bca007a9a758bd612481"/><section>
    <title>bind()</title>
<indexterm><primary>bind</primary><secondary>ServerSocket</secondary></indexterm>
<indexterm><primary>ServerSocket</primary><secondary>bind</secondary></indexterm>
<para><computeroutput>int ServerSocket::bind (int port, int backlog = <computeroutput>50</computeroutput>
)</computeroutput></para>
<para>Assigns the server socket to localhost. <formalpara><title>Returns</title>

<para>0 on success or a negative value on error, see <link linkend="_class_socket_1a9f68308228badcdd299cd83e62e36976">Socket::Errors</link> </para>
</formalpara>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
CPP/ccsocket.hCPP/ccsocket.cpp</section>
</section>
