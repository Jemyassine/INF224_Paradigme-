<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_server_socket" kind="class" language="C++" prot="public">
    <compoundname>ServerSocket</compoundname>
    <includes refid="ccsocket_8h" local="no">ccsocket.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_server_socket_1ac83ceafd3f8f2242c68e398901be12bd" prot="private" static="no" mutable="no">
        <type>SOCKET</type>
        <definition>SOCKET ServerSocket::sockfd_</definition>
        <argsstring></argsstring>
        <name>sockfd_</name>
        <qualifiedname>ServerSocket::sockfd_</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CPP/ccsocket.h" line="235" column="10" bodyfile="CPP/ccsocket.h" bodystart="235" bodyend="235"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_server_socket_1a2b3098589541243241ca25495155186c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ServerSocket::ServerSocket</definition>
        <argsstring>()</argsstring>
        <name>ServerSocket</name>
        <qualifiedname>ServerSocket::ServerSocket</qualifiedname>
        <briefdescription>
<para>Creates a listening socket that waits for connection requests by TCP/IP clients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CPP/ccsocket.h" line="195" column="3" bodyfile="CPP/ccsocket.cpp" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="class_server_socket_1a510674d924c2544e6b0069e39c36516b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ServerSocket::~ServerSocket</definition>
        <argsstring>()</argsstring>
        <name>~ServerSocket</name>
        <qualifiedname>ServerSocket::~ServerSocket</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CPP/ccsocket.h" line="197" column="3" bodyfile="CPP/ccsocket.cpp" bodystart="227" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="class_server_socket_1accc3d56d42aa50a5f3c920cf0b26959b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_socket" kindref="compound">Socket</ref> *</type>
        <definition>Socket * ServerSocket::accept</definition>
        <argsstring>()</argsstring>
        <name>accept</name>
        <qualifiedname>ServerSocket::accept</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accepts a new connection request and returns a socket for exchanging data with this client. This function blocks until there is a connection request. <simplesect kind="return"><para>the new <ref refid="class_socket" kindref="compound">Socket</ref> or nullptr on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CPP/ccsocket.h" line="202" column="10" bodyfile="CPP/ccsocket.cpp" bodystart="274" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="class_server_socket_1ad5281fe6c005bca007a9a758bd612481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ServerSocket::bind</definition>
        <argsstring>(int port, int backlog=50)</argsstring>
        <name>bind</name>
        <qualifiedname>ServerSocket::bind</qualifiedname>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int</type>
          <declname>backlog</declname>
          <defval>50</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assigns the server socket to localhost. <simplesect kind="return"><para>0 on success or a negative value on error, see <ref refid="class_socket_1a9f68308228badcdd299cd83e62e36976" kindref="member">Socket::Errors</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CPP/ccsocket.h" line="206" column="7" bodyfile="CPP/ccsocket.cpp" bodystart="236" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="class_server_socket_1a3eac6d5571bb092622d328dbda2de2cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ServerSocket::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <qualifiedname>ServerSocket::close</qualifiedname>
        <briefdescription>
<para>Closes the socket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CPP/ccsocket.h" line="209" column="7" bodyfile="CPP/ccsocket.cpp" bodystart="259" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="class_server_socket_1aa1c00353c8f50697c8a4a8882e520286" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ServerSocket::isClosed</definition>
        <argsstring>() const</argsstring>
        <name>isClosed</name>
        <qualifiedname>ServerSocket::isClosed</qualifiedname>
        <briefdescription>
<para>Returns true if the socket was closed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CPP/ccsocket.h" line="212" column="8" bodyfile="CPP/ccsocket.h" bodystart="212" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="class_server_socket_1a42fb2ded476612b5f23c46abb74db9c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SOCKET</type>
        <definition>SOCKET ServerSocket::descriptor</definition>
        <argsstring>()</argsstring>
        <name>descriptor</name>
        <qualifiedname>ServerSocket::descriptor</qualifiedname>
        <briefdescription>
<para>Returns the descriptor of the socket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CPP/ccsocket.h" line="215" column="10" bodyfile="CPP/ccsocket.h" bodystart="215" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="class_server_socket_1ab34154bc6114c638ae02f5e018121099" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ServerSocket::setReceiveBufferSize</definition>
        <argsstring>(int size)</argsstring>
        <name>setReceiveBufferSize</name>
        <qualifiedname>ServerSocket::setReceiveBufferSize</qualifiedname>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sets the SO_RCVBUF option to the specified value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CPP/ccsocket.h" line="220" column="7" bodyfile="CPP/ccsocket.cpp" bodystart="291" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="class_server_socket_1ae60d7cc31ad535e5d3cac42e38b8ec98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ServerSocket::setReuseAddress</definition>
        <argsstring>(bool)</argsstring>
        <name>setReuseAddress</name>
        <qualifiedname>ServerSocket::setReuseAddress</qualifiedname>
        <param>
          <type>bool</type>
          <defname>state</defname>
        </param>
        <briefdescription>
<para>Enables/disables the SO_REUSEADDR socket option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CPP/ccsocket.h" line="223" column="7" bodyfile="CPP/ccsocket.cpp" bodystart="296" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="class_server_socket_1aedb9144c9c375fcb14ac47bcb9d2eb17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ServerSocket::setSoTimeout</definition>
        <argsstring>(int timeout)</argsstring>
        <name>setSoTimeout</name>
        <qualifiedname>ServerSocket::setSoTimeout</qualifiedname>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Enables/disables SO_TIMEOUT with the specified timeout (in milliseconds). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CPP/ccsocket.h" line="226" column="8" bodyfile="CPP/ccsocket.cpp" bodystart="302" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="class_server_socket_1a9e5e1ee852ba26156c757a0086b780fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ServerSocket::setTcpNoDelay</definition>
        <argsstring>(bool)</argsstring>
        <name>setTcpNoDelay</name>
        <qualifiedname>ServerSocket::setTcpNoDelay</qualifiedname>
        <param>
          <type>bool</type>
          <defname>state</defname>
        </param>
        <briefdescription>
<para>Turns on/off TCP coalescence (useful in some cases to avoid delays). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CPP/ccsocket.h" line="229" column="7" bodyfile="CPP/ccsocket.cpp" bodystart="310" bodyend="314"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_server_socket_1a1e7360bc0ce72128c5439f0d245d0793" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_socket" kindref="compound">Socket</ref> *</type>
        <definition>Socket * ServerSocket::createSocket</definition>
        <argsstring>(SOCKET)</argsstring>
        <name>createSocket</name>
        <qualifiedname>ServerSocket::createSocket</qualifiedname>
        <param>
          <type>SOCKET</type>
          <defname>sockfd</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CPP/ccsocket.h" line="234" column="10" bodyfile="CPP/ccsocket.cpp" bodystart="231" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="class_server_socket_1a4ba3346c88fb74117c7b0d4d0e3e4005" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ServerSocket::ServerSocket</definition>
        <argsstring>(const ServerSocket &amp;)=delete</argsstring>
        <name>ServerSocket</name>
        <qualifiedname>ServerSocket::ServerSocket</qualifiedname>
        <param>
          <type>const <ref refid="class_server_socket" kindref="compound">ServerSocket</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CPP/ccsocket.h" line="236" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_server_socket_1a491761ffc35fccab8cb348a2286928dd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_server_socket" kindref="compound">ServerSocket</ref> &amp;</type>
        <definition>ServerSocket &amp; ServerSocket::operator=</definition>
        <argsstring>(const ServerSocket &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>ServerSocket::operator=</qualifiedname>
        <param>
          <type>const <ref refid="class_server_socket" kindref="compound">ServerSocket</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CPP/ccsocket.h" line="237" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_server_socket_1a900d8868c7f1368837fe3c2db99afd91" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_server_socket" kindref="compound">ServerSocket</ref> &amp;</type>
        <definition>ServerSocket &amp; ServerSocket::operator=</definition>
        <argsstring>(ServerSocket &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>ServerSocket::operator=</qualifiedname>
        <param>
          <type><ref refid="class_server_socket" kindref="compound">ServerSocket</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CPP/ccsocket.h" line="238" column="16"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>TCP/IP IPv4 server socket. Waits for requests to come in over the network. TCP/IP sockets do not preserve record boundaries but <ref refid="class_socket_buffer" kindref="compound">SocketBuffer</ref> solves this problem. </para>
    </detaileddescription>
    <location file="CPP/ccsocket.h" line="192" column="1" bodyfile="CPP/ccsocket.h" bodystart="192" bodyend="239"/>
    <listofallmembers>
      <member refid="class_server_socket_1accc3d56d42aa50a5f3c920cf0b26959b" prot="public" virt="non-virtual"><scope>ServerSocket</scope><name>accept</name></member>
      <member refid="class_server_socket_1ad5281fe6c005bca007a9a758bd612481" prot="public" virt="non-virtual"><scope>ServerSocket</scope><name>bind</name></member>
      <member refid="class_server_socket_1a3eac6d5571bb092622d328dbda2de2cf" prot="public" virt="non-virtual"><scope>ServerSocket</scope><name>close</name></member>
      <member refid="class_server_socket_1a1e7360bc0ce72128c5439f0d245d0793" prot="private" virt="non-virtual"><scope>ServerSocket</scope><name>createSocket</name></member>
      <member refid="class_server_socket_1a42fb2ded476612b5f23c46abb74db9c2" prot="public" virt="non-virtual"><scope>ServerSocket</scope><name>descriptor</name></member>
      <member refid="class_server_socket_1aa1c00353c8f50697c8a4a8882e520286" prot="public" virt="non-virtual"><scope>ServerSocket</scope><name>isClosed</name></member>
      <member refid="class_server_socket_1a491761ffc35fccab8cb348a2286928dd" prot="private" virt="non-virtual"><scope>ServerSocket</scope><name>operator=</name></member>
      <member refid="class_server_socket_1a900d8868c7f1368837fe3c2db99afd91" prot="private" virt="non-virtual"><scope>ServerSocket</scope><name>operator=</name></member>
      <member refid="class_server_socket_1a2b3098589541243241ca25495155186c" prot="public" virt="non-virtual"><scope>ServerSocket</scope><name>ServerSocket</name></member>
      <member refid="class_server_socket_1a4ba3346c88fb74117c7b0d4d0e3e4005" prot="private" virt="non-virtual"><scope>ServerSocket</scope><name>ServerSocket</name></member>
      <member refid="class_server_socket_1ab34154bc6114c638ae02f5e018121099" prot="public" virt="non-virtual"><scope>ServerSocket</scope><name>setReceiveBufferSize</name></member>
      <member refid="class_server_socket_1ae60d7cc31ad535e5d3cac42e38b8ec98" prot="public" virt="non-virtual"><scope>ServerSocket</scope><name>setReuseAddress</name></member>
      <member refid="class_server_socket_1aedb9144c9c375fcb14ac47bcb9d2eb17" prot="public" virt="non-virtual"><scope>ServerSocket</scope><name>setSoTimeout</name></member>
      <member refid="class_server_socket_1a9e5e1ee852ba26156c757a0086b780fe" prot="public" virt="non-virtual"><scope>ServerSocket</scope><name>setTcpNoDelay</name></member>
      <member refid="class_server_socket_1ac83ceafd3f8f2242c68e398901be12bd" prot="private" virt="non-virtual"><scope>ServerSocket</scope><name>sockfd_</name></member>
      <member refid="class_server_socket_1a510674d924c2544e6b0069e39c36516b" prot="public" virt="non-virtual"><scope>ServerSocket</scope><name>~ServerSocket</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
